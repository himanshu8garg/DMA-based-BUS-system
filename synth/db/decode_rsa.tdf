--lpm_decode CBX_DECLARE_ALL_CONNECTED_PORTS="OFF" DEVICE_FAMILY="Cyclone IV E" LPM_DECODES=8 LPM_WIDTH=3 data enable eq
--VERSION_BEGIN 15.0 cbx_cycloneii 2015:07:15:18:07:03:SJ cbx_lpm_add_sub 2015:07:15:18:07:03:SJ cbx_lpm_compare 2015:07:15:18:07:03:SJ cbx_lpm_decode 2015:07:15:18:07:03:SJ cbx_mgl 2015:07:15:18:09:04:SJ cbx_stratix 2015:07:15:18:07:03:SJ cbx_stratixii 2015:07:15:18:07:03:SJ  VERSION_END


-- Copyright (C) 1991-2015 Altera Corporation. All rights reserved.
--  Your use of Altera Corporation's design tools, logic functions 
--  and other software and tools, and its AMPP partner logic 
--  functions, and any output files from any of the foregoing 
--  (including device programming or simulation files), and any 
--  associated documentation or information are expressly subject 
--  to the terms and conditions of the Altera Program License 
--  Subscription Agreement, the Altera Quartus II License Agreement,
--  the Altera MegaCore Function License Agreement, or other 
--  applicable license agreement, including, without limitation, 
--  that your use is for the sole purpose of programming logic 
--  devices manufactured by Altera and sold by Altera or its 
--  authorized distributors.  Please refer to the applicable 
--  agreement for further details.



--synthesis_resources = lut 8 
SUBDESIGN decode_rsa
( 
	data[2..0]	:	input;
	enable	:	input;
	eq[7..0]	:	output;
) 
VARIABLE 
	data_wire[2..0]	: WIRE;
	enable_wire	: WIRE;
	eq_node[7..0]	: WIRE;
	eq_wire[7..0]	: WIRE;
	w_anode1610w[3..0]	: WIRE;
	w_anode1627w[3..0]	: WIRE;
	w_anode1637w[3..0]	: WIRE;
	w_anode1647w[3..0]	: WIRE;
	w_anode1657w[3..0]	: WIRE;
	w_anode1667w[3..0]	: WIRE;
	w_anode1677w[3..0]	: WIRE;
	w_anode1687w[3..0]	: WIRE;

BEGIN 
	data_wire[] = data[];
	enable_wire = enable;
	eq[] = eq_node[];
	eq_node[7..0] = eq_wire[7..0];
	eq_wire[] = ( w_anode1687w[3..3], w_anode1677w[3..3], w_anode1667w[3..3], w_anode1657w[3..3], w_anode1647w[3..3], w_anode1637w[3..3], w_anode1627w[3..3], w_anode1610w[3..3]);
	w_anode1610w[] = ( (w_anode1610w[2..2] & (! data_wire[2..2])), (w_anode1610w[1..1] & (! data_wire[1..1])), (w_anode1610w[0..0] & (! data_wire[0..0])), enable_wire);
	w_anode1627w[] = ( (w_anode1627w[2..2] & (! data_wire[2..2])), (w_anode1627w[1..1] & (! data_wire[1..1])), (w_anode1627w[0..0] & data_wire[0..0]), enable_wire);
	w_anode1637w[] = ( (w_anode1637w[2..2] & (! data_wire[2..2])), (w_anode1637w[1..1] & data_wire[1..1]), (w_anode1637w[0..0] & (! data_wire[0..0])), enable_wire);
	w_anode1647w[] = ( (w_anode1647w[2..2] & (! data_wire[2..2])), (w_anode1647w[1..1] & data_wire[1..1]), (w_anode1647w[0..0] & data_wire[0..0]), enable_wire);
	w_anode1657w[] = ( (w_anode1657w[2..2] & data_wire[2..2]), (w_anode1657w[1..1] & (! data_wire[1..1])), (w_anode1657w[0..0] & (! data_wire[0..0])), enable_wire);
	w_anode1667w[] = ( (w_anode1667w[2..2] & data_wire[2..2]), (w_anode1667w[1..1] & (! data_wire[1..1])), (w_anode1667w[0..0] & data_wire[0..0]), enable_wire);
	w_anode1677w[] = ( (w_anode1677w[2..2] & data_wire[2..2]), (w_anode1677w[1..1] & data_wire[1..1]), (w_anode1677w[0..0] & (! data_wire[0..0])), enable_wire);
	w_anode1687w[] = ( (w_anode1687w[2..2] & data_wire[2..2]), (w_anode1687w[1..1] & data_wire[1..1]), (w_anode1687w[0..0] & data_wire[0..0]), enable_wire);
END;
--VALID FILE
